(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{111:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return b})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return c}));var i=n(2),a=n(6),r=(n(0),n(119)),o={id:"bip-0008",title:"BIP-0008"},b={id:"bip-0008",title:"BIP-0008",description:"`",source:"@site/docs/bip-0008.md",permalink:"/BIPS_website/docs/bip-0008",editUrl:"https://github.com/anoop-b/BIPS_website/edit/master/docs/bip-0008.md",sidebar:"someSidebar",previous:{title:"BIP-0002",permalink:"/BIPS_website/docs/bip-0002"},next:{title:"BIP-0009",permalink:"/BIPS_website/docs/bip-0009"}},s=[{value:"Table of Contents",id:"table-of-contents",children:[]},{value:"Abstract",id:"abstract",children:[]},{value:"Motivation",id:"motivation",children:[]},{value:"Specification",id:"specification",children:[{value:"Summary",id:"summary",children:[]},{value:"Parameters",id:"parameters",children:[]},{value:"Selection guidelines",id:"selection-guidelines",children:[]},{value:"States",id:"states",children:[]},{value:"Bit flags",id:"bit-flags",children:[]},{value:"New consensus rules",id:"new-consensus-rules",children:[]},{value:"State transitions",id:"state-transitions",children:[]},{value:"Warning mechanism",id:"warning-mechanism",children:[]},{value:"getblocktemplate changes",id:"getblocktemplate-changes",children:[]},{value:"Reference implementation",id:"reference-implementation",children:[]}]},{value:"Backwards compatibility",id:"backwards-compatibility",children:[]},{value:"Deployments",id:"deployments",children:[]},{value:"References",id:"references",children:[]},{value:"Copyright",id:"copyright",children:[]}],l={rightToc:s};function c(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(i.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{}),"BIP: 8\nTitle: Version bits with lock-in by height\nAuthor: Shaolin Fry &lt;shaolinfry@protonmail.ch&gt;\nComments-Summary: No comments yet.\nComments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0008\nStatus: Rejected\nType: Informational\nCreated: 2017-02-01\nLicense: BSD-3-Clause\nCC0-1.0\n\n")),Object(r.b)("h2",{id:"table-of-contents"},"Table of Contents"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(i.a)({parentName:"li"},{href:"https://github.com/bitcoin/bips/blob/master/bip-0008.mediawiki#Abstract"}),"Abstract")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(i.a)({parentName:"li"},{href:"https://github.com/bitcoin/bips/blob/master/bip-0008.mediawiki#Motivation"}),"Motivation")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(i.a)({parentName:"li"},{href:"https://github.com/bitcoin/bips/blob/master/bip-0008.mediawiki#Specification"}),"Specification"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(i.a)({parentName:"li"},{href:"https://github.com/bitcoin/bips/blob/master/bip-0008.mediawiki#Summary"}),"Summary")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(i.a)({parentName:"li"},{href:"https://github.com/bitcoin/bips/blob/master/bip-0008.mediawiki#Parameters"}),"Parameters")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(i.a)({parentName:"li"},{href:"https://github.com/bitcoin/bips/blob/master/bip-0008.mediawiki#Selection_guidelines"}),"Selection guidelines")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(i.a)({parentName:"li"},{href:"https://github.com/bitcoin/bips/blob/master/bip-0008.mediawiki#States"}),"States")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(i.a)({parentName:"li"},{href:"https://github.com/bitcoin/bips/blob/master/bip-0008.mediawiki#Bit_flags"}),"Bit flags")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(i.a)({parentName:"li"},{href:"https://github.com/bitcoin/bips/blob/master/bip-0008.mediawiki#New_consensus_rules"}),"New consensus rules")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(i.a)({parentName:"li"},{href:"https://github.com/bitcoin/bips/blob/master/bip-0008.mediawiki#State_transitions"}),"State transitions")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(i.a)({parentName:"li"},{href:"https://github.com/bitcoin/bips/blob/master/bip-0008.mediawiki#Warning_mechanism"}),"Warning mechanism")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(i.a)({parentName:"li"},{href:"https://github.com/bitcoin/bips/blob/master/bip-0008.mediawiki#getblocktemplate_changes"}),"getblocktemplate changes")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(i.a)({parentName:"li"},{href:"https://github.com/bitcoin/bips/blob/master/bip-0008.mediawiki#Reference_implementation"}),"Reference implementation")))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(i.a)({parentName:"li"},{href:"https://github.com/bitcoin/bips/blob/master/bip-0008.mediawiki#Backwards_compatibility"}),"Backwards compatibility")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(i.a)({parentName:"li"},{href:"https://github.com/bitcoin/bips/blob/master/bip-0008.mediawiki#Deployments"}),"Deployments")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(i.a)({parentName:"li"},{href:"https://github.com/bitcoin/bips/blob/master/bip-0008.mediawiki#References"}),"References")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(i.a)({parentName:"li"},{href:"https://github.com/bitcoin/bips/blob/master/bip-0008.mediawiki#Copyright"}),"Copyright"))),Object(r.b)("h2",{id:"abstract"},"Abstract"),Object(r.b)("p",null,"This document specifies an alteration to ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki"}),"BIP9")," that replaces time based activation with block height, as well as\nguaranteed activation of backward-compatible changes (further called\n",'"',"soft forks",'"',")."),Object(r.b)("p",null,"The key words ",'"',"MUST",'"',", ",'"',"MUST NOT",'"',", ",'"',"REQUIRED",'"',", ",'"',"SHALL",'"',", ",'"',"SHALL NOT",'"',",\n",'"',"SHOULD",'"',", ",'"',"SHOULD NOT",'"',", ",'"',"RECOMMENDED",'"',", ",'"',"MAY",'"',", and ",'"',"OPTIONAL",'"'," in this\ndocument are to be interpreted as described in RFC 2119."),Object(r.b)("h2",{id:"motivation"},"Motivation"),Object(r.b)("p",null,"BIP9 introduced a mechanism for doing parallel soft forking\ndeployments based on repurposing the block nVersion field. Activation is\ndependent on near unanimous hashrate signalling which may be\nimpractical and result in veto by a small minority of non-signalling\nhashrate. Super majority hashrate based activation triggers allow for\naccelerated activation where the majority hash power enforces the new\nrules in lieu of full nodes upgrading. Since all consensus rules are\nultimately enforced by full nodes, eventually any new soft fork will be\nenforced by the economy. This proposal combines these two aspects to\nprovide eventual flag day activation after a reasonable time\n(recommended a year), as well as for accelerated activation by majority\nof hash rate before the flag date."),Object(r.b)("p",null,"Block time is somewhat unreliable and may be intentionally or\nunintentionally inaccurate, so thresholds based on block time are not\nideal. Secondly, BIP9 specified triggers based on the first retarget\nafter a given time, which is non-intuitive. Since each new block must\nincrease the height by one, thresholds based on block height are much\nmore reliable and intuitive and can be calculated exactly for difficulty\nretarget."),Object(r.b)("h2",{id:"specification"},"Specification"),Object(r.b)("h3",{id:"summary"},"Summary"),Object(r.b)("p",null,"This specification is the same as ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki"}),"BIP9")," except that MTP time based threshold are replaced with block height,\nand the state machine has no FAILED condition. The state transition from\n",Object(r.b)("strong",{parentName:"p"},"STARTED")," to ",Object(r.b)("strong",{parentName:"p"},"LOCKED_IN")," will occur under two condition:"),Object(r.b)("p",null,"The first is when the threshold of blocks signalling is reached as per BIP9, before ",Object(r.b)("strong",{parentName:"p"},"LOCKED_IN")," state has been reached. The second condition is when the block height\nreaches the timeout block height while still being in the ",Object(r.b)("strong",{parentName:"p"},"STARTED")," state."),Object(r.b)("h3",{id:"parameters"},"Parameters"),Object(r.b)("p",null,"Each soft fork deployment is specified by the following per-chain parameters (further elaborated below):"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"The ",Object(r.b)("strong",{parentName:"li"},"name")," specifies a very brief description of the soft\nfork, reasonable for use as an identifier. For deployments described in a\nsingle BIP, it is recommended to use the name ",'"',"bipN",'"'," where N is the\nappropriate BIP number."),Object(r.b)("li",{parentName:"ol"},"The ",Object(r.b)("strong",{parentName:"li"},"bit")," determines which bit in\nthe nVersion field of the block is to be used to signal the soft fork\nlock-in and activation. It is chosen from the set {0,1,2,...,28}."),Object(r.b)("li",{parentName:"ol"},"The ",Object(r.b)("strong",{parentName:"li"},"startheight")," specifies a minimum block height at which a block at which the bit gains its meaning."),Object(r.b)("li",{parentName:"ol"},"The ",Object(r.b)("strong",{parentName:"li"},"timeoutheight")," specifies a block height at which the deployment should lock-in if not already locked in or activated.")),Object(r.b)("h3",{id:"selection-guidelines"},"Selection guidelines"),Object(r.b)("p",null,"The following guidelines are suggested for selecting these parameters for a soft fork:"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},Object(r.b)("strong",{parentName:"li"},"name")," should be selected such that no two softforks, concurrent or otherwise, ever use the same name."),Object(r.b)("li",{parentName:"ol"},Object(r.b)("strong",{parentName:"li"},"bit")," should be selected such that no two concurrent softforks use the same bit."),Object(r.b)("li",{parentName:"ol"},Object(r.b)("strong",{parentName:"li"},"startheight")," should be set to some block height in the future, approximately 30 days\n(or 4320 blocks) after a software release date including the soft fork.\nThis allows for some release delays, while preventing triggers as a\nresult of parties running pre-release software. The startheight should\nbe a retarget block height for simplicity."),Object(r.b)("li",{parentName:"ol"},Object(r.b)("strong",{parentName:"li"},"timeoutheight")," should be 1 year, or 52416 blocks (26 retarget intervals) after ",Object(r.b)("strong",{parentName:"li"},"startheight"),".")),Object(r.b)("p",null,"A later deployment using the same bit is possible as long as the\nstartheight is after the previous one","'","s timeoutheight or activation, but\nit is discouraged until necessary, and even then recommended to have a\npause in between to detect buggy software."),Object(r.b)("h3",{id:"states"},"States"),Object(r.b)("p",null,"With each block and soft fork, we associate a deployment state. The possible states are:"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},Object(r.b)("strong",{parentName:"li"},"DEFINED")," is the first state that each soft fork starts out as. The genesis block is by definition in this state for each deployment."),Object(r.b)("li",{parentName:"ol"},Object(r.b)("strong",{parentName:"li"},"STARTED")," for blocks past the startheight."),Object(r.b)("li",{parentName:"ol"},Object(r.b)("strong",{parentName:"li"},"LOCKED_IN")," for one retarget period after the first retarget period with STARTED\nblocks of which at least threshold have the associated bit set in\nnVersion."),Object(r.b)("li",{parentName:"ol"},Object(r.b)("strong",{parentName:"li"},"ACTIVE")," for all blocks after the LOCKED_IN retarget period."),Object(r.b)("li",{parentName:"ol"},Object(r.b)("strong",{parentName:"li"},"FAILED")," if block height is greater than or equal to timeoutheight during the DEFINED state.")),Object(r.b)("h3",{id:"bit-flags"},"Bit flags"),Object(r.b)("p",null,"The nVersion block header field is to be interpreted as a 32-bit\nlittle-endian integer (as present), and bits are selected within this\ninteger as values (1 ","<","<"," N) where N is the bit number."),Object(r.b)("p",null,"Blocks in the STARTED state get an nVersion whose bit position bit is\nset to 1. The top 3 bits of such blocks must be 001, so the range of\nactually possible nVersion values is ","[0x20000000...0x3FFFFFFF]",",\ninclusive."),Object(r.b)("p",null,"Due to the constraints set by BIP 34, BIP 66 and BIP 65, we only have\n0x7FFFFFFB possible nVersion values available. This restricts us to at\nmost 30 independent deployments. By restricting the top 3 bits to 001 we\nget 29 out of those for the purposes of this proposal, and support two\nfuture upgrades for different mechanisms (top bits 010 and 011). When a\nblock nVersion does not have top bits 001, it is treated as if all bits\nare 0 for the purposes of deployments."),Object(r.b)("p",null,"Miners should continue setting the bit in LOCKED_IN phase so uptake is visible, though this has no effect on consensus rules."),Object(r.b)("h3",{id:"new-consensus-rules"},"New consensus rules"),Object(r.b)("p",null,"The new consensus rules for each soft fork are enforced for each block that has ACTIVE state."),Object(r.b)("h3",{id:"state-transitions"},"State transitions"),Object(r.b)("p",null,Object(r.b)("img",Object(i.a)({parentName:"p"},{src:"/BIPS_website/bip-0008/states.png",alt:null}))),Object(r.b)("p",null,"The genesis block has state DEFINED for each deployment, by definition."),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{}),"State GetStateForBlock(block) {\n    if (block.height == 0) {\n        return DEFINED;\n    }\n")),Object(r.b)("p",null,"All blocks within a retarget period have the same state. This means\nthat if floor(block1.height / 2016) = floor(block2.height / 2016), they\nare guaranteed to have the same state for every deployment."),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{}),"    if ((block.height % 2016) != 0) {\n        return GetStateForBlock(block.parent);\n    }\n")),Object(r.b)("p",null,"Otherwise, the next state depends on the previous state:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{}),"switch (GetStateForBlock(GetAncestorAtHeight(block, block.height - 2016))) {\n")),Object(r.b)("p",null,"We remain in the initial state until either we pass the start block height or the timeout height."),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{}),"    case DEFINED:\n        if (block.height &gt;= timeoutheight) {\n            return FAILED;\n        }\n        if (block.height &gt;= startheight) {\n            return STARTED;\n        }\n        return DEFINED;\n")),Object(r.b)("p",null,"After a period in the STARTED state, if we","'","re past the timeout, we switch to LOCKED_IN. If not, we tally the bits set,\nand transition to LOCKED_IN if a sufficient number of blocks in the past period set the deployment bit in their\nversion numbers. The threshold is \u22651916 blocks (95% of 2016), or \u22651512 for testnet (75% of 2016)."),Object(r.b)("p",null,"There could be two non-overlapping deployments on the same bit, where the first one transitions to LOCKED_IN while the\nother one simultaneously transitions to STARTED, which would mean both would demand setting the bit."),Object(r.b)("p",null,"Note that a block","'","s state never depends on its own nVersion; only on that of its ancestors."),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{}),"    case STARTED:\n        if (block.height &gt;= timeoutheight)\n            return LOCKED_IN;\n\n        int count = 0;\n        walk = block;\n        for (i = 0; i &lt; 2016; i++) {\n            walk = walk.parent;\n            if (walk.nVersion & 0xE0000000 == 0x20000000 && (walk.nVersion &gt;&gt; bit) & 1 == 1) {\n                count++;\n            }\n        }\n        if (count &gt;= threshold) {\n            return LOCKED_IN;\n        }\n        return STARTED;\n")),Object(r.b)("p",null,"After a retarget period of LOCKED_IN, we automatically transition to ACTIVE."),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{}),"    case LOCKED_IN:\n        return ACTIVE;\n")),Object(r.b)("p",null,"And ACTIVE is terminal a state, which a deployment stays in once reached."),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{}),"    case ACTIVE:\n        return ACTIVE;\n}\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Implementation")," It should be noted that the states are maintained along block chain\nbranches, but may need recomputation when a reorganization happens."),Object(r.b)("p",null,"Given that the state for a specific block/deployment combination is\ncompletely determined by its ancestry before the current retarget period\n(i.e. up to and including its ancestor with height block.height - 1 -\n(block.height % 2016)), it is possible to implement the mechanism above\nefficiently and safely by caching the resulting state of every\nmultiple-of-2016 block, indexed by its parent."),Object(r.b)("h3",{id:"warning-mechanism"},"Warning mechanism"),Object(r.b)("p",null,"To support upgrade warnings, an extra ",'"',"unknown upgrade",'"'," is tracked,\nusing the ",'"',"implicit bit",'"'," mask = (block.nVersion & ~expectedVersion)\n!= 0. Mask will be non-zero whenever an unexpected bit is set in\nnVersion. Whenever LOCKED_IN for the unknown upgrade is detected, the\nsoftware should warn loudly about the upcoming soft fork. It should warn\neven more loudly after the next retarget period (when the unknown\nupgrade is in the ACTIVE state)."),Object(r.b)("h3",{id:"getblocktemplate-changes"},"getblocktemplate changes"),Object(r.b)("p",null,"The template request Object is extended to include a new item:"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(i.a)({parentName:"tr"},{align:null}),"template request"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(i.a)({parentName:"tr"},{align:null}),"Key")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(i.a)({parentName:"tr"},{align:null}),"rules")))),Object(r.b)("p",null,"The template Object is also extended:"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(i.a)({parentName:"tr"},{align:null}),"template"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(i.a)({parentName:"tr"},{align:null}),"Key")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(i.a)({parentName:"tr"},{align:null}),"rules")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(i.a)({parentName:"tr"},{align:null}),"vbavailable")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(i.a)({parentName:"tr"},{align:null}),"vbrequired")))),Object(r.b)("p",null,"The ",'"',"version",'"'," key of the template is retained, and used to indicate\nthe server","'","s preference of deployments.\nIf versionbits is being used, ",'"',"version",'"'," MUST be within the versionbits\nrange of ","[0x20000000...0x3FFFFFFF]",".\nMiners MAY clear or set bits in the block version WITHOUT any special\n",'"',"mutable",'"'," key, provided they are listed among the template","'","s\n",'"',"vbavailable",'"'," and (when clearing is desired) NOT included as a bit in\n",'"',"vbrequired",'"',"."),Object(r.b)("p",null,"Softfork deployment names listed in ",'"',"rules",'"'," or as keys in\n",'"',"vbavailable",'"'," may be prefixed by a ","'","!","'"," character.\nWithout this prefix, GBT clients may assume the rule will not impact\nusage of the template as-is; typical examples of this would be when\npreviously valid transactions cease to be valid, such as BIPs 16, 65,\n66, 68, 112, and 113.\nIf a client does not understand a rule without the prefix, it may use it\nunmodified for mining.\nOn the other hand, when this prefix is used, it indicates a more subtle\nchange to the block structure or generation transaction; examples of\nthis would be BIP 34 (because it modifies coinbase construction) and 141\n(since it modifies the txid hashing and adds a commitment to the\ngeneration transaction).\nA client that does not understand a rule prefixed by ","'","!","'"," must not\nattempt to process the template, and must not attempt to use it for\nmining even unmodified."),Object(r.b)("h3",{id:"reference-implementation"},"Reference implementation"),Object(r.b)("p",null,Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"https://github.com/bitcoin/bitcoin/compare/master...shaolinfry:bip8-height"}),"https://github.com/bitcoin/bitcoin/compare/master...shaolinfry:bip8-height")),Object(r.b)("h2",{id:"backwards-compatibility"},"Backwards compatibility"),Object(r.b)("p",null,"BIP8 and BIP9 deployments should not share concurrent active\ndeployment bits. Nodes that only implement BIP9 will not activate a BIP8\nsoft fork if hashpower threshold is not reached by ",Object(r.b)("strong",{parentName:"p"},"timeout"),", however, those nodes will still accept the blocks generated by activated nodes."),Object(r.b)("h2",{id:"deployments"},"Deployments"),Object(r.b)("p",null,"A living list of deployment proposals can be found ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"https://github.com/bitcoin/bips/blob/master/bip-0008/assignments.mediawiki"}),"here"),"."),Object(r.b)("h2",{id:"references"},"References"),Object(r.b)("p",null,Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki"}),"BIP9")),Object(r.b)("p",null,Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-February/013643.html"}),"Mailing list discussion")),Object(r.b)("h2",{id:"copyright"},"Copyright"),Object(r.b)("p",null,"This document is dual licensed as BSD 3-clause, and Creative Commons CC0 1.0 Universal."))}c.isMDXComponent=!0},119:function(e,t,n){"use strict";n.d(t,"a",(function(){return h})),n.d(t,"b",(function(){return u}));var i=n(0),a=n.n(i);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function b(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),c=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):b({},t,{},e)),n},h=function(e){var t=c(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=Object(i.forwardRef)((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),h=c(n),m=i,u=h["".concat(o,".").concat(m)]||h[m]||p[m]||r;return n?a.a.createElement(u,b({ref:t},l,{components:n})):a.a.createElement(u,b({ref:t},l))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=m;var b={};for(var s in t)hasOwnProperty.call(t,s)&&(b[s]=t[s]);b.originalType=e,b.mdxType="string"==typeof e?e:i,o[1]=b;for(var l=2;l<r;l++)o[l]=n[l];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);