(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{106:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return b}));var i=n(2),a=n(6),r=(n(0),n(119)),o={id:"bip-0012",title:"BIP-0012"},s={id:"bip-0012",title:"BIP-0012",description:"`",source:"@site/docs/bip-0012.md",permalink:"/BIPS_website/docs/bip-0012",editUrl:"https://github.com/anoop-b/BIPS_website/edit/master/docs/bip-0012.md",sidebar:"someSidebar",previous:{title:"BIP-0011",permalink:"/BIPS_website/docs/bip-0011"},next:{title:"Contribution",permalink:"/BIPS_website/docs/contribute"}},c=[{value:"Abstract",id:"abstract",children:[]},{value:"Motivation",id:"motivation",children:[]},{value:"Specification",id:"specification",children:[]},{value:"Rationale",id:"rationale",children:[]},{value:"Backwards Compatibility",id:"backwards-compatibility",children:[]},{value:"Reference Implementation",id:"reference-implementation",children:[]},{value:"See Also",id:"see-also",children:[]}],l={rightToc:c};function b(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(i.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{}),"  BIP: 12\n  Layer: Consensus (soft fork)\n  Title: OP_EVAL\n  Author: Gavin Andresen <gavinandresen@gmail.com>\n  Comments-Summary: No comments yet.\n  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0012\n  Status: Withdrawn\n  Type: Standards Track\n  Created: 2011-10-18\n")),Object(r.b)("h2",{id:"abstract"},"Abstract"),Object(r.b)("p",null,"This BIP describes a new opcode (OP_EVAL) for the ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"https://en.bitcoin.it/wiki/Script"}),"Bitcoin scripting system"),",\nand a new 'standard' transaction type that uses it to enables the\nreceiver of bitcoins to specify the transaction type needed to re-spend\nthem."),Object(r.b)("h2",{id:"motivation"},"Motivation"),Object(r.b)("p",null,'Enable "end-to-end" secure wallets and payments to fund escrow\ntransactions or other complex transactions in a way that is\nbackwards-compatible for old clients and miners.'),Object(r.b)("h2",{id:"specification"},"Specification"),Object(r.b)("p",null,"OP_EVAL will re-define the existing OP_NOP1 opcode, and will function as follows:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"When executed during transaction verification, pops the\nitem from the top of the stack, deserializes it, and executes the\nresulting script."),Object(r.b)("li",{parentName:"ul"},"If there is no item on the top of the stack or the item is not a valid script then transaction validation fails."),Object(r.b)("li",{parentName:"ul"},"If there are any OP_CODESEPARATORs in the deserialized script then transaction validation fails."),Object(r.b)("li",{parentName:"ul"},"If there are any OP_EVALs in the deserialized script they are also executed, but recursion is limited to a depth of 2."),Object(r.b)("li",{parentName:"ul"},"Transaction verification must fail if interpreting OP_EVAL as a no-op would cause the verification to fail.")),Object(r.b)("p",null,"A new standard transaction type (scriptPubKey) that is relayed by clients and included in mined blocks is also defined:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{}),"DUP HASH160 {20-byte-hash-value} EQUALVERIFY OP_EVAL\n")),Object(r.b)("p",null,"Which is redeemed by a standard scriptSig:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{}),"...signatures... {serialized script}\n")),Object(r.b)("p",null,"Transactions that redeem standard OP",Object(r.b)("em",{parentName:"p"},"EVAL scriptPubKeys are only considered standard if the _serialized script")," is, itself, one of the standard transaction types."),Object(r.b)("h2",{id:"rationale"},"Rationale"),Object(r.b)("p",null,"OP",Object(r.b)("em",{parentName:"p"},"EVAL allows the receiver of bitcoins to specify how they can be\nspent when they are spent, instead of requiring the sender of the\nbitcoins to know the details of how the bitcoins may be redeemed. The\nsender only needs to know the hash of the _serialized script"),", and one new type of bitcoin address can be used to fund arbitrarily complex transactions."),Object(r.b)("p",null,"If ",Object(r.b)("em",{parentName:"p"},"serialized script")," is a large or complicated multi-signature\nscript, then the burden of paying for it (in increased transaction fees\ndue to more signature operations or transaction size) is shifted from\nthe sender to the receiver."),Object(r.b)("p",null,"The main objection to OP_EVAL is that it adds complexity, and\ncomplexity is the enemy of security. Also, evaluating data as code has a\nlong record of being a source of security vulnerabilties."),Object(r.b)("p",null,"That same argument can be applied to the existing Bitcoin 'scripting'\nsystem; scriptPubKeys are transmit as data across the network and are\nthen interpreted by every bitcoin implementation. OP_EVAL just moves the\ndata that will be interpreted. It is debatable whether or not the\nentire idea of putting a little interpreted expression evaluation\nlanguage at the core of Bitcoin was brilliant or stupid, but the\nexistence of OP_EVAL does not make the expression language less secure."),Object(r.b)("p",null,"There is a 1-confirmation attack on old clients that interepret\nOP_EVAL as a no-op, but it is expensive and difficult in practice. The\nattack is:"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"Attacker creates an OP_EVAL transaction that is valid as seen by old clients, but invalid for new clients."),Object(r.b)("li",{parentName:"ol"},"Attacker also creates a standard transaction that spends the OP_EVAL transaction, and pays the victim."),Object(r.b)("li",{parentName:"ol"},"Attacker\nmanages to mine a block that contains both transactions. If the victim\naccepts the 1-confirmation payment, then the attacker wins because both\ntransactions will be invalidated when the rest of the network overwrites\nthe attacker's invalid block.")),Object(r.b)("p",null,"The attack is expensive because it requires the attacker create a block\nthat they know will be invalidated. It is difficult because bitcoin\nbusinesses should not accept 1-confirmation transactions for\nhigher-value transactions."),Object(r.b)("h2",{id:"backwards-compatibility"},"Backwards Compatibility"),Object(r.b)("p",null,"Surprisingly, because OP",Object(r.b)("em",{parentName:"p"},"EVAL redefines the OP_NOP1 opcode, standard\nOP_EVAL transactions will validate with old clients and miners. They\nwill check only that the _serialized script")," hashes to the correct\nvalue; the OP_EVAL will be interpreted as a no-op, and as long as the\nhash is correct the transaction will be considered valid (no signature\nchecking will be done by old clients and miners)."),Object(r.b)("p",null,"Old clients will ignore OP_EVAL transactions and transactions that\ndepend on them until they are put into a block by either an old miner\nthat includes non-standard transactions in its blocks or by a new miner."),Object(r.b)("p",null,"Avoiding a block-chain split by malicious OP_EVAL transactions requires careful handling of two cases:"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"An OP_EVAL transaction that is invalid for new clients/miners but valid for old clients/miners."),Object(r.b)("li",{parentName:"ol"},"An OP_EVAL transaction that is valid for new clients/miners but invalid for old clients/miners.")),Object(r.b)("p",null,'For case (1), new clients and miners will be coded to interpret OP_EVAL\nas a no-op until February 1, 2012. Before then, miners will be asked to\nput the string "OP_EVAL" in blocks that they produce so that hashing\npower that supports the new opcode can be gauged. If less than 50% of\nminers accept the change as of January 15, 2012 the rollout will be\npostponed until more than 50% of hashing power supports OP_EVAL (the\nrollout will be rejected if it becomes clear that a majority of hashing\npower will not be achieved).'),Object(r.b)("p",null,"For case (2), new clients and miners will be written to make sure\nthat transactions involving OP_EVAL are valid if OP_EVAL is interpreted\nas a no-op.\nExample of a transaction that must fail for both old and new\nminers/clients:"),Object(r.b)("p",null,"scriptSig: {serialized OP_11}\nscriptPubKey: OP_EVAL OP_11 OP_EQUAL"),Object(r.b)("h2",{id:"reference-implementation"},"Reference Implementation"),Object(r.b)("p",null,Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"https://github.com/gavinandresen/bitcoin-git/tree/op_eval"}),"https://github.com/gavinandresen/bitcoin-git/tree/op_eval")),Object(r.b)("h2",{id:"see-also"},"See Also"),Object(r.b)("p",null,Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"https://bitcointalk.org/index.php?topic=46538"}),"https://bitcointalk.org/index.php?topic=46538")),Object(r.b)("p",null,'"Bitcoin Address 01" BIP'),Object(r.b)("p",null,"M-of-N Multisignature Transactions BIP 11"))}b.isMDXComponent=!0},119:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return h}));var i=n(0),a=n.n(i);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),b=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s({},t,{},e)),n},p=function(e){var t=b(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=Object(i.forwardRef)((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=b(n),u=i,h=p["".concat(o,".").concat(u)]||p[u]||d[u]||r;return n?a.a.createElement(h,s({ref:t},l,{components:n})):a.a.createElement(h,s({ref:t},l))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var l=2;l<r;l++)o[l]=n[l];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);